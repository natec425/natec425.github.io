<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Nate Clark: Posts tagged 'Elm'</title>
  <description>Nate Clark: Posts tagged 'Elm'</description>
  <link>http://www.example.com/tags/Elm.html</link>
  <lastBuildDate>Sat, 17 Sep 2016 01:18:29 UT</lastBuildDate>
  <pubDate>Sat, 17 Sep 2016 01:18:29 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>AI Reuse pt 1</title>
   <link>http://www.example.com/blog/2016/09/16/ai-reuse-pt-1/?utm_source=Elm&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2016-09-16-ai-reuse-pt-1</guid>
   <pubDate>Sat, 17 Sep 2016 01:18:29 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;I thought a list of independently playing Voltorb Flip AIs would be pretty neat. So, I did it. Right now, it is my original &amp;ldquo;expectation&amp;rdquo; based AI alongside a random AI. I wanted to add a simple learning AI this week, but I started too late. However, I did learn to appreciate some important differences and similarities in the nature of the random AI and the (soon to be) learning AI.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h3 id="plugging-in-a-new-brain"&gt;Plugging In A New Brain&lt;/h3&gt;

&lt;p&gt;Of course, I refuse to copy/paste/edit my original AI to produce a new one. What I need isn&amp;rsquo;t hotkeys, what I need is parameters. So, I Extreme Makeover&amp;rsquo;d my AI.Core.Model type alias from this:&lt;/p&gt;

&lt;div class="brush: elm"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kr"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;wins&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;losses&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;points&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;gameModel&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Game&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Core&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Model&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;playing&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;to this:&lt;/p&gt;

&lt;div class="brush: elm"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kr"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;wins&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;losses&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;points&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;gameModel&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Game&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Core&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Model&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;playing&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;play&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Board&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Game&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Core&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt; &lt;span class="kt"&gt;Game&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Core&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Of course, I had to make an change in the update function to call the new &lt;code&gt;model.play&lt;/code&gt;, but it was a pretty minor change for pretty reasonable gain. If you are interested in seeing the diff, &lt;a href="https://github.com/natec425/voltorb-flip/commit/ad4feebf87f694aeef5806876c2b953293c5d881"&gt;here it is&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This will change next week, but it is good enough for the random AI. The reason why it is sufficient for the random AI but (kinda) insufficient for the learning AI has to do with Elm&amp;rsquo;s purity and managed effects. My random ai&amp;rsquo;s play function can use the provided Random effect manager to create a Cmd that generates a random Game.Core.Expose Msg. All of the impurity is handled very neatly in the Random effects manager, my AI doesn&amp;rsquo;t need to own any of it. The important thing to remember is the state still exists; it is just hidden inside the Random effect manager.&lt;/p&gt;

&lt;p&gt;A knee-jerk strategy could be to implement some sort of Learn effect manager. This just feels like a bad idea to me. I&amp;rsquo;m honestly not even going to entertain it for long. I feel like the problem is the AI.Core.Model not being sufficiently general. I was able to get by this week thanks to Random having such an easy out with prepackaged managed state, but next week I have a more specialized type of state that should probably be handled inside the AI&amp;rsquo;s Model somehow. I have an idea of how I will do it, but for now, on to using the multiple AIs.&lt;/p&gt;

&lt;h3 id="multiple-independent-ais"&gt;Multiple Independent AIs&lt;/h3&gt;

&lt;p&gt;So the next step is smashing all of your AIs into one Model and dispatching updates appropriately! Sounds simple enough.&lt;/p&gt;

&lt;div class="brush: elm"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kr"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="kt"&gt;AI&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Core&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Model&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;AI&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Core&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, inside the update function, each message comes with an Int telling me which AI the AI.Core.Msg is for. Surprisingly easy.&lt;/p&gt;

&lt;div id="voltorb-flip"&gt;&lt;/div&gt;

&lt;script src="/js/voltorb-flip-multiai.js"&gt;&lt;/script&gt;

&lt;script&gt;
    var node = document.getElementById('voltorb-flip');
    var app = Elm.MultiAI.embed(node);&lt;/script&gt;

&lt;p&gt;&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Short Post: Voltorb Flip AI</title>
   <link>http://www.example.com/blog/2016/09/09/short-post-voltorb-flip-ai/?utm_source=Elm&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2016-09-09-short-post-voltorb-flip-ai</guid>
   <pubDate>Sat, 10 Sep 2016 02:40:08 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;So this week is going to be super short. I finished a first pass at getting a (possibly bad) AI to auto play the game. Also, I&amp;rsquo;m still enjoying Elm a lot. I feel like I don&amp;rsquo;t have to dread the browser anymore.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h3 id="super-simple-ai"&gt;Super Simple AI&lt;/h3&gt;

&lt;p&gt;Go forth and earn me unusable points.&lt;/p&gt;

&lt;div id="voltorb-flip"&gt;&lt;/div&gt;

&lt;script src="/js/voltorb-flip-3.js"&gt;&lt;/script&gt;

&lt;script&gt;
var node = document.getElementById('voltorb-flip');
var app = Elm.AI.Main.embed(node);&lt;/script&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Currently the AI has uses some notion of expected points per cell. For example, a cell that must be either a 2 or a 3 should have an expected value of 2.5 The just exposes the cell with the highest expected points until it wins or loses.&lt;/p&gt;

&lt;h3 id="elm-has-been-great"&gt;Elm has been great&lt;/h3&gt;

&lt;p&gt;So far the project is about 500 lines of elm, and it has been a pleasure. It has been surprisingly pleasant to add or change features. I would be interested to see what this project would look like if it were implemented using javascript/typescript/coffeescript/etc. I don&amp;rsquo;t know if my implementation would be or worse. In fact, I would bet mine would be worse in some ways. I wouldn&amp;rsquo;t be surprised if my implementation was more correct or maintainable. Elm can take a good bit of credit for helping with that. But my use of non-Elm web tech should probably be pretty poor. Also, my use of Elm should probably be pretty poor (less than 1 month of experience).&lt;/p&gt;

&lt;p&gt;The code is &lt;a href="https://github.com/natec425/Voltorb-Flip"&gt;up on github&lt;/a&gt;. Feel free to disapprove of the lack of documentation or tests. I approve of your disapproval and hope to fix it soon.&lt;/p&gt;

&lt;p&gt;But hey, at least I don&amp;rsquo;t hate the browser anymore.&lt;/p&gt;

&lt;h3 id="next-week"&gt;Next Week&lt;/h3&gt;

&lt;p&gt;A student at Base Camp keeps asking me to make a learning AI. Maybe I&amp;rsquo;ll make another bad AI, but this time&amp;hellip; it will learn. No click bait deep learning. Just regular old vanilla reinforcement.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Voltorb Flip in Elm pt 2</title>
   <link>http://www.example.com/blog/2016/09/02/voltorb-flip-in-elm-pt-2/?utm_source=Elm&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2016-09-02-voltorb-flip-in-elm-pt-2</guid>
   <pubDate>Fri, 02 Sep 2016 13:06:38 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;Last week I wrote a &lt;a href="blog/2016/08/26/voltorb-flip-in-elm/" title="Voltorb Flip In Elm"&gt;post&lt;/a&gt; about my progess implementing the Pokemon mini-game &lt;a href="http://bulbapedia.bulbagarden.net/wiki/Voltorb_Flip" title="Voltorb Flip"&gt;Voltorb Flip&lt;/a&gt;. I was struggling with a bug related to generating a new game, but the &lt;a href="https://groups.google.com/forum/#!forum/elm-discuss" title="Elm-Discuss"&gt;elm mailing list&lt;/a&gt; helped me out (&lt;a href="https://groups.google.com/forum/#!msg/elm-discuss/_MW_1EF9jSE/dNKNqMvFBwAJ;context-place=forum/elm-discuss" title="Thanks!"&gt;Thanks Joseph Ni&lt;/a&gt;). In this post I&amp;rsquo;ll talk about &lt;a href="http://elm-lang.org" title="Elm"&gt;Elm&lt;/a&gt;, my implementation, and a sample application used in &lt;a href="http://guide.elm-lang.org/architecture/user_input/buttons.html" title="Sample Application"&gt;The Elm Guide&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h3 id="starting-with-the-end"&gt;Starting With the End&lt;/h3&gt;

&lt;p&gt;So, in the interest of showing off my work, here is the game. There is a CSS bug, but&amp;hellip; meh. CSS isn&amp;rsquo;t really my focus right now. I&amp;rsquo;ve only been working in the browser for about two weeks. I&amp;rsquo;ll get to CSS later.&lt;/p&gt;

&lt;p&gt;As a reminder. The green/red text in the gray cells tell you how many points/mines are in that row/column. Exposing a mine causes you to lose. Exposing all the points &amp;gt; 1 causes you to win.&lt;/p&gt;

&lt;div id="voltorb-flip"&gt;&lt;/div&gt;

&lt;script src="/js/voltorb-flip-2.js"&gt;&lt;/script&gt;

&lt;script&gt;
var node = document.getElementById('voltorb-flip');
var app = Elm.Game.Main.embed(node);&lt;/script&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id="the-elm-architecture"&gt;The Elm Architecture&lt;/h3&gt;

&lt;p&gt;It might be tempting to start by describing the Elm &lt;em&gt;language&lt;/em&gt;, but I&amp;rsquo;m not sure how useful that would be. The issue with describing the language first comes from two main points.&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;It seems that the language is designed with &lt;a href="http://guide.elm-lang.org/architecture/" title="The Elm Architecture"&gt;The Elm Architecture&lt;/a&gt; in mind.  So, describing the language by itself wouldn&amp;rsquo;t tell the higher level story of  how you will almost certainly use the language.&lt;/li&gt;
 &lt;li&gt;If describing the language would be exciting to you, you are probably already sold.  It is kind of the preaching to the choir problem. If &amp;ldquo;Purely Functional&amp;rdquo;, &amp;ldquo;Reactive&amp;rdquo;,  and &amp;ldquo;Managed Effects&amp;rdquo; sound exciting to you, my job is already done. If they sound like a  headache, I want to base the conversation in more familiar terms and walk us towards  an understanding of why those ideas fit nicely.&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;As far as I can tell, all Elm applications are built in terms of a pattern/library  called &lt;a href="http://guide.elm-lang.org/architecture/" title="The Elm Architecture"&gt;The Elm Architecture&lt;/a&gt; (TEA). If you are familiar with the &lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" title="MVC"&gt;Model-View-Controller&lt;/a&gt; pattern, you are more than halfway there. TEA is defined by three main components: the model, the update function, and the view function.&lt;/p&gt;

&lt;p&gt;My sense of the architecture sounds something like this.&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;Describe the shape of a state in the application.&lt;/li&gt;
 &lt;li&gt;Describe how to produce new state.&lt;/li&gt;
 &lt;li&gt;Describe how to view a given state.&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;Once you provide these pieces to TEA, it will handle the event loop.&lt;/p&gt;

&lt;h3 id="the-model"&gt;The Model&lt;/h3&gt;

&lt;p&gt;The model is the data that represents the state of your application. Considering the Elm guide&amp;rsquo;s &lt;a href="http://guide.elm-lang.org/architecture/user_input/buttons.html" title="Counter Example"&gt;simple increment/decrement counter web app&lt;/a&gt; example, the state of your application is the number of times the user has clicked the button. That means that your model is just an Int not a class derived from some model-ish parent class. Just an int. If the user has clicked the increment button 3 times and the decrement button 6 times, the state of the application should be &amp;ndash;3. In Elm, this looks like this.&lt;/p&gt;

&lt;div class="brush: elm"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kr"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Voltorb flip is a bit more complex than a counter, so I have a more complex model. My model represents the state of the game. The game is in one of 4 possible states: NoGame, Playing, Won, and Lost. The Playing, Won, and Lost states have some additional information alongside them. They also know the state of the Board. A Board is a combination of three pieces of data: the location of the mines, the location of cells the user has exposed, and the locations and point values of the target cells. In Elm, this looks like the following code.&lt;/p&gt;

&lt;div class="brush: elm"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;{-&lt;/span&gt;
&lt;span class="cm"&gt;The state of the game is one of:&lt;/span&gt;
&lt;span class="cm"&gt;    No Game is currently being played&lt;/span&gt;
&lt;span class="cm"&gt;    Currently playing the provided Board&lt;/span&gt;
&lt;span class="cm"&gt;    Won the provided Board&lt;/span&gt;
&lt;span class="cm"&gt;    Lost the provided Board&lt;/span&gt;
&lt;span class="cm"&gt;-}&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NoGame&lt;/span&gt;           
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Playing&lt;/span&gt; &lt;span class="kt"&gt;Board&lt;/span&gt;    
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Won&lt;/span&gt; &lt;span class="kt"&gt;Board&lt;/span&gt;        
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Lost&lt;/span&gt; &lt;span class="kt"&gt;Board&lt;/span&gt;       

&lt;span class="cm"&gt;{-&lt;/span&gt;
&lt;span class="cm"&gt;A Board is each of:&lt;/span&gt;
&lt;span class="cm"&gt;    A Set of (row, column) pairs that locate the mines.&lt;/span&gt;
&lt;span class="cm"&gt;    A Set of (row, column) pairs that locate the exposed cells.&lt;/span&gt;
&lt;span class="cm"&gt;    A Dictionary mapping (row, column) pairs to point values.&lt;/span&gt;
&lt;span class="cm"&gt;-}&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kr"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Board&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;mines&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;exposed&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;targets&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Dict&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;That, in its entirety, is my model for a game of Voltorb Flip. Of course, any novel data structure needs to have operations defined for it, and this model is no different. I define plenty of functions that use a Model to produce some new value. For example, the player wins the game when they expose all the target values. That sounds like a function from Board to Bool. And that is exactly what I wrote. The function takes a Board, and it evaluates to true if the set of target locations minus the set of exposed locations is empty.&lt;/p&gt;

&lt;div class="brush: elm"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;allTargetsExposed&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Board&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="nv"&gt;allTargetsExposed&lt;/span&gt; &lt;span class="nv"&gt;board&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;targetPoss&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
            &lt;span class="nv"&gt;board&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;targets&lt;/span&gt;
            &lt;span class="nf"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dict&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;keys&lt;/span&gt;
            &lt;span class="nf"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;fromList&lt;/span&gt;
    &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;diff&lt;/span&gt; &lt;span class="nv"&gt;targetPoss&lt;/span&gt; &lt;span class="nv"&gt;board&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;exposed&lt;/span&gt;
       &lt;span class="nf"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;isEmpty&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The point is not Elm&amp;rsquo;s syntax. The point is that a Model in TEA is just data. Simple data that is only as decorated as &lt;em&gt;you&lt;/em&gt; need it to be. If the state of my application is an integer, that is totally fine.&lt;/p&gt;

&lt;h3 id="the-update-function"&gt;The Update Function&lt;/h3&gt;

&lt;p&gt;Now that we have a description of the state of our application, we want a way to find out the next state. I&amp;rsquo;ll go ahead and show the signature for the function and unpack from there.&lt;/p&gt;

&lt;div class="brush: elm"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;In English, the update function uses a Msg, a Model, and it evaluates to a (Model, Cmd Msg) pair. So there are two new pieces in there: Msg, and Cmd. I&amp;rsquo;ll touch on Cmd, but mostly focus on Msg.&lt;/p&gt;

&lt;h4 id="msg"&gt;Msg&lt;/h4&gt;

&lt;p&gt;An Msg value is a description of what kind of update should be applied to the Model. In the counter example, there are two kinds of updates that can be applied: Increment, Decrement. Here is the elm to describe that new data type.&lt;/p&gt;

&lt;div class="brush: elm"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Increment&lt;/span&gt;
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Decrement&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Given these possible Msg values (ignoring that whole Cmd thing), you could imagine that update would do something like this:&lt;/p&gt;

&lt;div class="brush: elm"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="kt"&gt;Increment&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;-- should evaluate to (2, ???)&lt;/span&gt;
&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="kt"&gt;Increment&lt;/span&gt; &lt;span class="mi"&gt;9000&lt;/span&gt; &lt;span class="c1"&gt;-- should evaluate to (9001, ???)&lt;/span&gt;
&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="kt"&gt;Decrement&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="c1"&gt;-- should evaluate to (42, ???)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;In Voltorb Flip, I have 3 possible messages: location can become exposed, a new game can be requested, and a new board can be initialized. Here is the elm to describe that new data type.&lt;/p&gt;

&lt;div class="brush: elm"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
    &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NewBoard&lt;/span&gt; &lt;span class="kt"&gt;Board&lt;/span&gt;
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Expose&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
    &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;NewGame&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The difference between NewBoard and NewGame is subtle (and possibly because I&amp;rsquo;m doing something wrong). So for right now, we can think about it as either exposing a cell or starting a new game. If you were in an object-oriented environment, these would probably be your public methods.&lt;/p&gt;

&lt;h4 id="cmd"&gt;Cmd&lt;/h4&gt;

&lt;p&gt;At this point, you might be comfortable with the idea of taking a Msg, taking a Model, and producing a new Model. So let&amp;rsquo;s get to the weirdest thing we&amp;rsquo;ve seen so far.&lt;/p&gt;

&lt;p&gt;So far, we haven&amp;rsquo;t actually used anything specific to TEA; we&amp;rsquo;ve just let TEA guide our use of the language. Cmd is our first explicitly TEA construct. At the beginning of the post I said that TEA will manage the event loop for the application, and Cmd is the language TEA speaks. Cmd is a data structure that describes something TEA should do for you.&lt;/p&gt;

&lt;p&gt;That might sound a bit odd. You might ask yourself, &amp;ldquo;Do something for me? As in, there are things I can&amp;rsquo;t do?&amp;rdquo; So, yes and yes. Remember those buzzwords &amp;ldquo;Purely Functional&amp;rdquo; and &amp;ldquo;Managed Effects&amp;rdquo;? This is where those start to get big.&lt;/p&gt;

&lt;p&gt;And before the idea sounds too harsh, I would encourage you to consider something. As programming languages (and frameworks) have evolved over time, I think we have gotten a lot of leverage by constraining the programmer. We are constrained by structured programming. We are constrained by automatic memory management. We are constrained by static type systems. Sometimes they don&amp;rsquo;t work out, but they can be great. So, however outlandish these ideas may sound, remember how ludicrous removing goto sounded. Okay, so back to your regularly scheduled programming.&lt;/p&gt;

&lt;p&gt;Right, so in a language like python (not purely functional, has &lt;em&gt;unmanaged&lt;/em&gt; effects), if I want a random integer between 0 and 100, I call the randint function from the random module. That function gives me back an integer between some bounds that I specify.&lt;/p&gt;

&lt;div class="brush: python"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="n"&gt;definitely_an_integer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;probably_a_different_integer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I can&amp;rsquo;t do this in Elm. Generating that random number involves executing a side-effect. If I want a random number, I have to ask TEA for that random number. And TEA speaks Cmd, so I need to find a way to create a Cmd that describes generating my random number. Sure enough, &lt;a href="http://package.elm-lang.org/packages/elm-lang/core/latest/Random#generate" title="Random.generate"&gt;Elm&amp;rsquo;s Random module&lt;/a&gt; has a way for me to turn a Random.Generator (you guessed it, a description of the random value) into a Cmd.&lt;/p&gt;

&lt;div class="brush: elm"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import &lt;/span&gt;&lt;span class="nc"&gt;Random&lt;/span&gt; &lt;span class="nv"&gt;exposing&lt;/span&gt; &lt;span class="nf"&gt;(..)&lt;/span&gt;

&lt;span class="nv"&gt;int_generator&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Random&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Generator&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nv"&gt;int_generator&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Random&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="c1"&gt;-- Imagine my Msg type for some app is just an Int&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kr"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;

&lt;span class="nv"&gt;cmd_for_tea&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nv"&gt;cmd_for_tea&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Random&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Generate&lt;/span&gt; &lt;span class="nv"&gt;identity&lt;/span&gt; &lt;span class="nv"&gt;int_generator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Creating a new voltorb flip game involves some random value generation, and this is why I have both NewGame and NewBoard Msgs. NewGame is there to ask TEA to create a NewBoard with the randomly generated Board. NewBoard is to construct a new Model with a (possibly randomly generated) Board. Expose is there to expose a cell in the current Board. So here is my update function.&lt;/p&gt;

&lt;div class="brush: elm"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;update&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
        &lt;span class="kt"&gt;NewBoard&lt;/span&gt; &lt;span class="nv"&gt;board&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Playing&lt;/span&gt; &lt;span class="nv"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kt"&gt;Expose&lt;/span&gt; &lt;span class="nv"&gt;row&lt;/span&gt; &lt;span class="nv"&gt;column&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;expose&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nv"&gt;row&lt;/span&gt; &lt;span class="nv"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kt"&gt;NewGame&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Random&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;generate&lt;/span&gt; &lt;span class="kt"&gt;NewBoard&lt;/span&gt; &lt;span class="nv"&gt;randomBoard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s it. You&amp;rsquo;ll notice a helper function &lt;code&gt;expose&lt;/code&gt;. You might be able to infer what it does. It takes a Model, an Int, an Int, and evaluates to the Model where the corresponding cell has been exposed.&lt;/p&gt;

&lt;p&gt;So to summarize Msg and Cmd.&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;Msg is the language your application speaks.&lt;/li&gt;
 &lt;li&gt;Cmd is the language TEA speaks.&lt;/li&gt;
 &lt;li&gt;If you need some side effect performed, you to give TEA a Cmd describing it.&lt;/li&gt;&lt;/ol&gt;

&lt;h3 id="the-view-function"&gt;The View Function&lt;/h3&gt;

&lt;p&gt;While the idea of a Model being basic data might be somewhat &amp;ldquo;back to basics,&amp;rdquo; the view function is an idea that is very much in vogue. The view function is a function that takes in a Model and evaluates to a data structure representing HTML. Facebook&amp;rsquo;s UI building library &lt;a href="https://facebook.github.io/react/" title="React"&gt;React&lt;/a&gt; is popularizing this idea using the name &lt;a href="https://facebook.github.io/react/docs/glossary.html" title="Virtual DOM"&gt;virtual DOM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve come a long way now, so let&amp;rsquo;s just throw out the counter view.&lt;/p&gt;

&lt;div class="brush: elm"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
  &lt;span class="nv"&gt;div&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;button&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;onClick&lt;/span&gt; &lt;span class="kt"&gt;Decrement&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;div&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;toString&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;button&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;onClick&lt;/span&gt; &lt;span class="kt"&gt;Increment&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"+"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;If you&amp;rsquo;ve done any React work, this might feel pretty familiar. In this case, the view for this application is a div containing two buttons and a div that shows the string conversion of the model (Elm won&amp;rsquo;t silently turn an Int into a String).&lt;/p&gt;

&lt;p&gt;There is an interesting thing about the Html data structure. It is &lt;code&gt;Html Msg&lt;/code&gt; instead of plain &lt;code&gt;Html&lt;/code&gt;. Understandably, the Html you produce is expected to be able to feed an Msg that your application understands back into your update function. So, when a user clicks on the first button, TEA will call update with Decrement and the current model. It will use the result of that call as the new application state and execute the Cmd. Here is a bit of the voltorb flip view code.&lt;/p&gt;

&lt;div class="brush: elm"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
        &lt;span class="kt"&gt;NoGame&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;restartButton&lt;/span&gt;
        &lt;span class="kt"&gt;Playing&lt;/span&gt; &lt;span class="nv"&gt;board&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;viewBoard&lt;/span&gt; &lt;span class="nv"&gt;board&lt;/span&gt;
        &lt;span class="kt"&gt;Won&lt;/span&gt; &lt;span class="nv"&gt;board&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt; 
            &lt;span class="nv"&gt;div&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"You Win!"&lt;/span&gt;
                   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;viewBoard&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;board&lt;/span&gt; &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;exposed&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;allPoss&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="kt"&gt;Lost&lt;/span&gt; &lt;span class="nv"&gt;board&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nv"&gt;div&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"You Lose!"&lt;/span&gt;
                   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;viewBoard&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;board&lt;/span&gt; &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;exposed&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;allPoss&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;

&lt;span class="nv"&gt;restartButton&lt;/span&gt; &lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="nv"&gt;restartButton&lt;/span&gt; &lt;span class="nf"&gt;=&lt;/span&gt;
    &lt;span class="nv"&gt;button&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;onClick&lt;/span&gt; &lt;span class="kt"&gt;NewGame&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Click to Restart"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Again, you probably noticed the &lt;code&gt;viewBoard&lt;/code&gt; helper function. It takes a &lt;code&gt;Board&lt;/code&gt; and evaluates to &lt;code&gt;Html Msg&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="final-thoughts"&gt;Final Thoughts&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve really enjoyed writing this app. Elm is a great fit for me, and TEA provided a great way to help me break down my application into simple pieces (that stay simple pieces).&lt;/p&gt;

&lt;p&gt;Personally, I came to Elm for the language features. I&amp;rsquo;m a big fan of functional programming (particularly ML style languages) and interested in anything labelled Reactive.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve come to believe a few things:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;Most developers don&amp;rsquo;t become visibly excited when they hear  &amp;ldquo;purely functional, reactive ML in the browser&amp;rdquo; (I may have actually squealed).  So, people might be more interested in TEA, and then learn how to love  pure functional programming through the wins that TEA gives you.&lt;/li&gt;
 &lt;li&gt;Elm + TEA is great. It even seems that plenty of devs are moving towards  it &lt;a href="https://facebook.github.io/react/" title="React"&gt;one&lt;/a&gt; .. &lt;a href="http://redux.js.org/" title="Redux"&gt;js&lt;/a&gt; .. &lt;a href="https://lodash.com/" title="Lodash"&gt;library&lt;/a&gt; .. at a &lt;a href="https://flowtype.org/" title="Flow"&gt;time&lt;/a&gt; (&lt;a href="https://www.typescriptlang.org/" title="Typescript"&gt;or maybe typescript&lt;/a&gt;).&lt;/li&gt;
 &lt;li&gt;The Elm community is pretty great. My question to the mailing list was answered correctly  within 24 hours (of a Friday evening post).&lt;/li&gt;
 &lt;li&gt;The Elm compiler is pretty remarkable. I dare you to find a compiler that is more interested  in &lt;em&gt;helping&lt;/em&gt; a developer (of any skill level) correct their code. I won&amp;rsquo;t spoil your first  compiler error for you. Go write some incorrect Elm code; learn to see compilers in a new light.&lt;/li&gt;&lt;/ol&gt;

&lt;h3 id="next-week--robot-voltorb-flip"&gt;Next Week : Robot Voltorb Flip&lt;/h3&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Voltorb Flip in Elm</title>
   <link>http://www.example.com/blog/2016/08/26/voltorb-flip-in-elm/?utm_source=Elm&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2016-08-26-voltorb-flip-in-elm</guid>
   <pubDate>Fri, 26 Aug 2016 16:09:18 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;We all suffer from attacks of nostalgia, and I&amp;rsquo;m no different. Unfortunately, many of my weaknesses drive me to do ludicrous things like re-subscribe to &lt;a href="https://worldofwarcraft.com/en-us/" title="World of Warcraft"&gt;World of Warcraft&lt;/a&gt;, listen to crappy emo bands (I&amp;rsquo;ll spare you the links), or &amp;hellip; acquiring &amp;hellip; the latest Pokemon game. I&amp;rsquo;ll be honest, I&amp;rsquo;m not super proud of the last one. I&amp;rsquo;ve never been one to pirate anything, but I have occasionally convinced myself that I should grab the latest ROM, burn 2 hours of my life away, and continue about my business. So of course, &lt;a href="http://www.pokemongo.com/" title="Pokemon Go"&gt;Pokemon Go&lt;/a&gt; should have tossed me off the bandwagon, but this time around the fan-made &lt;a href="http://www.pokemonuranium.com/" title="Pokemon Uranium"&gt;Pokemon Uranium&lt;/a&gt; caught my fall into piracy.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;In Pokemon Uranium (and apparently &lt;a href="http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9mon_HeartGold_and_SoulSilver_Versions" title="HeartGold and SoulSilver"&gt;HeartGold and SoulSilver&lt;/a&gt;), there is a minesweeper-esque mini-game called &lt;a href="http://bulbapedia.bulbagarden.net/wiki/Voltorb_Flip" title="Voltorb Flip"&gt;Voltorb Flip&lt;/a&gt;. I thought the game was neat, and a few of the students at &lt;a href="https://basecampcodingacademy.org/" title="Base Camp Coding Academy"&gt;Base Camp Coding Academy&lt;/a&gt; are Pokemon fans, so I thought it could provide an opportunity to talk about what a simple AI for the game might look like. Of course, &lt;a href="http://www.voltorbflip.com/" title="Voltorb Flip Solver"&gt;the internet has already done it&lt;/a&gt;, but education is often about rolling your own. I typically hate front-end development, but when I heard there was a &lt;a href="https://en.wikipedia.org/wiki/Reactive_programming" title="Reactive Programming"&gt;Reactive&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/ML_(programming_language)" title="ML"&gt;ML&lt;/a&gt; in the browser (&lt;a href="http://elm-lang.org" title="Elm"&gt;Elm&lt;/a&gt;) I thought I should give it a shot.&lt;/p&gt;

&lt;h3 id="buggy-pokemon"&gt;Buggy Pokemon&lt;/h3&gt;

&lt;p&gt;The game is almost finished, but there is a bug related to generating a new game. The goal of the game is to expose all the cells that contain a 2 or a 3 and not expose a mine. The numbers at the ends of the columns/rows indicate the number of points (green) and mines (red) in that row or column. Feel free to poke around with my broken implementation.&lt;/p&gt;

&lt;div id="voltorb-flip"&gt;&lt;/div&gt;

&lt;script src="/js/voltorb_flip.js"&gt;&lt;/script&gt;

&lt;script&gt;
    var node = document.getElementById('voltorb-flip');
    var app = Elm.Game.embed(node);&lt;/script&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Not the sexiest bit of front end work, but I&amp;rsquo;ll take it. Next week, I hope to post a corrected implementation. Expect plenty of technical detail on working with Elm and where I went wrong this week.&lt;/p&gt;&lt;/html&gt;</description></item></channel></rss>